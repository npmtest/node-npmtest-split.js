{"/home/travis/build/npmtest/node-npmtest-split.js/test.js":"/* istanbul instrument in package npmtest_split_js */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-split.js/lib.npmtest_split.js.js":"/* istanbul instrument in package npmtest_split_js */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_split_js = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_split_js = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-split.js/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-split.js && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_split_js */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_split_js\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_split_js.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_split_js.rollup.js'] =\n            local.assetsDict['/assets.npmtest_split_js.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_split_js.__dirname + '/lib.npmtest_split_js.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-split.js/node_modules/split.js/split.js":"// The programming goals of Split.js are to deliver readable, understandable and\n// maintainable code, while at the same time manually optimizing for tiny minified file size,\n// browser compatibility without additional requirements, graceful fallback (IE8 is supported)\n// and very few assumptions about the user's page layout.\n//\n// Make sure all browsers handle this JS library correctly with ES5.\n// More information here: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode\n'use strict';\n\n// A wrapper function that does a couple things:\n//\n// 1. Doesn't pollute the global namespace. This is important for a library.\n// 2. Allows us to mount the library in different module systems, as well as\n//    directly in the browser.\n(function() {\n\n// Save the global `this` for use later. In this case, since the library only\n// runs in the browser, it will refer to `window`. Also, figure out if we're in IE8\n// or not. IE8 will still render correctly, but will be static instead of draggable.\n//\n// Save a couple long function names that are used frequently.\n// This optimization saves around 400 bytes.\n//\n// Set a float fudging global, used when dividing and setting sizes to long floats.\n// There's a chance that sometimes the sum of the floats would end up being slightly\n// larger than 100%, breaking the layout. The float fudging value is subtracted from\n// the percentage size.\nvar global = this\n  , isIE8 = global.attachEvent && !global[addEventListener]\n  , document = global.document\n  , addEventListener = 'addEventListener'\n  , removeEventListener = 'removeEventListener'\n  , getBoundingClientRect = 'getBoundingClientRect'\n  , FLOAT_FUDGING = 0.5\n\n  // This library only needs two helper functions:\n  //\n  // The first determines which prefixes of CSS calc we need.\n  // We only need to do this once on startup, when this anonymous function is called.\n  // \n  // Tests -webkit, -moz and -o prefixes. Modified from StackOverflow:\n  // http://stackoverflow.com/questions/16625140/js-feature-detection-to-detect-the-usage-of-webkit-calc-over-calc/16625167#16625167\n  , calc = (function () {\n        var el\n          , prefixes = [\"\", \"-webkit-\", \"-moz-\", \"-o-\"]\n\n        for (var i = 0; i < prefixes.length; i++) {\n            el = document.createElement('div')\n            el.style.cssText = \"width:\" + prefixes[i] + \"calc(9px)\"\n\n            if (el.style.length) {\n                return prefixes[i] + \"calc\"\n            }\n        }\n    })()\n\n  // The second helper function allows elements and string selectors to be used\n  // interchangeably. In either case an element is returned. This allows us to\n  // do `Split(elem1, elem2)` as well as `Split('#id1', '#id2')`.\n  , elementOrSelector = function (el) {\n        if (typeof el === 'string' || el instanceof String) {\n            return document.querySelector(el)\n        } else {\n            return el\n        }\n    }\n\n  // The main function to initialize a split. Split.js thinks about each pair\n  // of elements as an independant pair. Dragging the gutter between two elements\n  // only changes the dimensions of elements in that pair. This is key to understanding\n  // how the following functions operate, since each function is bound to a pair.\n  // \n  // A pair object is shaped like this:\n  // \n  // {\n  //     a: DOM element,\n  //     b: DOM element,\n  //     aMin: Number,\n  //     bMin: Number,\n  //     dragging: Boolean,\n  //     parent: DOM element,\n  //     isFirst: Boolean,\n  //     isLast: Boolean,\n  //     direction: 'horizontal' | 'vertical'\n  // }\n  //\n  // The basic sequence:\n  // \n  // 1. Set defaults to something sane. `options` doesn't have to be passed at all.\n  // 2. Initialize a bunch of strings based on the direction we're splitting.\n  //    A lot of the behavior in the rest of the library is paramatized down to\n  //    rely on CSS strings and classes.\n  // 3. Define the dragging helper functions, and a few helpers to go with them.\n  // 4. Loop through the elements while pairing them off. Every pair gets an\n  //    `pair` object, a gutter, and special isFirst/isLast properties.\n  // 5. Actually size the pair elements, insert gutters and attach event listeners.\n  , Split = function (ids, options) {\n    var dimension\n      , i\n      , clientDimension\n      , clientAxis\n      , position\n      , gutterClass\n      , paddingA\n      , paddingB\n      , pairs = []\n\n    // 1. Set defaults to something sane. `options` doesn't have to be passed at all,\n    // so create an options object if none exists. Pixel values 10, 100 and 30 are\n    // arbitrary but feel natural.\n    options = typeof options !== 'undefined' ?  options : {}\n\n    if (typeof options.gutterSize === 'undefined') options.gutterSize = 10\n    if (typeof options.minSize === 'undefined') options.minSize = 100\n    if (typeof options.snapOffset === 'undefined') options.snapOffset = 30\n    if (typeof options.direction === 'undefined') options.direction = 'horizontal'\n    if (typeof options.elementStyle === 'undefined') options.elementStyle = function (dimension, size, gutterSize) {\n        var style = {}\n\n        if (typeof size !== 'string' && !(size instanceof String)) {\n            if (!isIE8) {\n                style[dimension] = calc + '(' + size + '% - ' + gutterSize + 'px)'\n            } else {\n                style[dimension] = size + '%'\n            }\n        } else {\n            style[dimension] = size\n        }\n\n        return style\n    }\n    if (typeof options.gutterStyle === 'undefined') options.gutterStyle = function (dimension, gutterSize) {\n        var style = {}\n\n        style[dimension] = gutterSize + 'px'\n\n        return style\n    }\n\n    // 2. Initialize a bunch of strings based on the direction we're splitting.\n    // A lot of the behavior in the rest of the library is paramatized down to\n    // rely on CSS strings and classes.\n    if (options.direction == 'horizontal') {\n        dimension = 'width'\n        clientDimension = 'clientWidth'\n        clientAxis = 'clientX'\n        position = 'left'\n        gutterClass = 'gutter gutter-horizontal'\n        paddingA = 'paddingLeft'\n        paddingB = 'paddingRight'\n        if (!options.cursor) options.cursor = 'ew-resize'\n    } else if (options.direction == 'vertical') {\n        dimension = 'height'\n        clientDimension = 'clientHeight'\n        clientAxis = 'clientY'\n        position = 'top'\n        gutterClass = 'gutter gutter-vertical'\n        paddingA = 'paddingTop'\n        paddingB = 'paddingBottom'\n        if (!options.cursor) options.cursor = 'ns-resize'\n    }\n\n    // 3. Define the dragging helper functions, and a few helpers to go with them.\n    // Each helper is bound to a pair object that contains it's metadata. This\n    // also makes it easy to store references to listeners that that will be\n    // added and removed.\n    // \n    // Even though there are no other functions contained in them, aliasing\n    // this to self saves 50 bytes or so since it's used so frequently.\n    //\n    // The pair object saves metadata like dragging state, position and\n    // event listener references.\n    //\n    // startDragging calls `calculateSizes` to store the inital size in the pair object.\n    // It also adds event listeners for mouse/touch events,\n    // and prevents selection while dragging so avoid the selecting text.\n    var startDragging = function (e) {\n            // Alias frequently used variables to save space. 200 bytes.\n            var self = this\n              , a = self.a\n              , b = self.b\n\n            // Call the onDragStart callback.\n            if (!self.dragging && options.onDragStart) {\n                options.onDragStart()\n            }\n\n            // Don't actually drag the element. We emulate that in the drag function.\n            e.preventDefault()\n\n            // Set the dragging property of the pair object.\n            self.dragging = true\n\n            // Create two event listeners bound to the same pair object and store\n            // them in the pair object.\n            self.move = drag.bind(self)\n            self.stop = stopDragging.bind(self)\n\n            // All the binding. `window` gets the stop events in case we drag out of the elements.\n            global[addEventListener]('mouseup', self.stop)\n            global[addEventListener]('touchend', self.stop)\n            global[addEventListener]('touchcancel', self.stop)\n\n            self.parent[addEventListener]('mousemove', self.move)\n            self.parent[addEventListener]('touchmove', self.move)\n\n            // Disable selection. Disable!\n            a[addEventListener]('selectstart', noop)\n            a[addEventListener]('dragstart', noop)\n            b[addEventListener]('selectstart', noop)\n            b[addEventListener]('dragstart', noop)\n\n            a.style.userSelect = 'none'\n            a.style.webkitUserSelect = 'none'\n            a.style.MozUserSelect = 'none'\n            a.style.pointerEvents = 'none'\n\n            b.style.userSelect = 'none'\n            b.style.webkitUserSelect = 'none'\n            b.style.MozUserSelect = 'none'\n            b.style.pointerEvents = 'none'\n\n            // Set the cursor, both on the gutter and the parent element.\n            // Doing only a, b and gutter causes flickering.\n            self.gutter.style.cursor = options.cursor\n            self.parent.style.cursor = options.cursor\n\n            // Cache the initial sizes of the pair.\n            calculateSizes.call(self)\n        }\n\n      // stopDragging is very similar to startDragging in reverse.\n      , stopDragging = function () {\n            var self = this\n              , a = self.a\n              , b = self.b\n\n            if (self.dragging && options.onDragEnd) {\n                options.onDragEnd()\n            }\n\n            self.dragging = false\n\n            // Remove the stored event listeners. This is why we store them.\n            global[removeEventListener]('mouseup', self.stop)\n            global[removeEventListener]('touchend', self.stop)\n            global[removeEventListener]('touchcancel', self.stop)\n\n            self.parent[removeEventListener]('mousemove', self.move)\n            self.parent[removeEventListener]('touchmove', self.move)\n\n            // Delete them once they are removed. I think this makes a difference\n            // in memory usage with a lot of splits on one page. But I don't know for sure.\n            delete self.stop\n            delete self.move\n\n            a[removeEventListener]('selectstart', noop)\n            a[removeEventListener]('dragstart', noop)\n            b[removeEventListener]('selectstart', noop)\n            b[removeEventListener]('dragstart', noop)\n\n            a.style.userSelect = ''\n            a.style.webkitUserSelect = ''\n            a.style.MozUserSelect = ''\n            a.style.pointerEvents = ''\n\n            b.style.userSelect = ''\n            b.style.webkitUserSelect = ''\n            b.style.MozUserSelect = ''\n            b.style.pointerEvents = ''\n\n            self.gutter.style.cursor = ''\n            self.parent.style.cursor = ''\n        }\n\n      // drag, where all the magic happens. The logic is really quite simple:\n      // \n      // 1. Ignore if the pair is not dragging.\n      // 2. Get the offset of the event.\n      // 3. Snap offset to min if within snappable range (within min + snapOffset).\n      // 4. Actually adjust each element in the pair to offset.\n      // \n      // ---------------------------------------------------------------------\n      // |    | <- this.aMin               ||              this.bMin -> |    |\n      // |    |  | <- this.snapOffset      ||     this.snapOffset -> |  |    |\n      // |    |  |                         ||                        |  |    |\n      // |    |  |                         ||                        |  |    |\n      // ---------------------------------------------------------------------\n      // | <- this.start                                        this.size -> |\n      , drag = function (e) {\n            var offset\n\n            if (!this.dragging) return\n\n            // Get the offset of the event from the first side of the\n            // pair `this.start`. Supports touch events, but not multitouch, so only the first\n            // finger `touches[0]` is counted.\n            if ('touches' in e) {\n                offset = e.touches[0][clientAxis] - this.start\n            } else {\n                offset = e[clientAxis] - this.start\n            }\n\n            // If within snapOffset of min or max, set offset to min or max.\n            // snapOffset buffers aMin and bMin, so logic is opposite for both.\n            // Include the appropriate gutter sizes to prevent overflows.\n            if (offset <= this.aMin + options.snapOffset + this.aGutterSize) {\n                offset = this.aMin + this.aGutterSize\n            } else if (offset >= this.size - (this.bMin + options.snapOffset + this.bGutterSize)) {\n                offset = this.size - (this.bMin + this.bGutterSize)\n            }\n\n            offset = offset - FLOAT_FUDGING\n\n            // Actually adjust the size.\n            adjust.call(this, offset)\n\n            // Call the drag callback continously. Don't do anything too intensive\n            // in this callback.\n            if (options.onDrag) {\n                options.onDrag()\n            }\n        }\n\n      // Cache some important sizes when drag starts, so we don't have to do that\n      // continously:\n      // \n      // `size`: The total size of the pair. First element + second element + first gutter + second gutter.\n      // `percentage`: The percentage between 0-100 that the pair occupies in the parent.\n      // `start`: The leading side of the first element.\n      //\n      // ------------------------------------------------ - - - - - - - - - - -\n      // |      aGutterSize -> |||                      |                     |\n      // |                     |||                      |                     |\n      // |                     |||                      |                     |\n      // |                     ||| <- bGutterSize       |                     |\n      // ------------------------------------------------ - - - - - - - - - - -\n      // | <- start                             size -> |       parentSize -> |\n      , calculateSizes = function () {\n            // Figure out the parent size minus padding.\n            var computedStyle = global.getComputedStyle(this.parent)\n              , parentSize = this.parent[clientDimension] - parseFloat(computedStyle[paddingA]) - parseFloat(computedStyle[paddingB])\n\n            this.size = this.a[getBoundingClientRect]()[dimension] + this.b[getBoundingClientRect]()[dimension] + this.aGutterSize + this.bGutterSize\n            this.percentage = Math.min(this.size / parentSize * 100, 100)\n            this.start = this.a[getBoundingClientRect]()[position]\n        }\n\n      // Actually adjust the size of elements `a` and `b` to `offset` while dragging.\n      // calc is used to allow calc(percentage + gutterpx) on the whole split instance,\n      // which allows the viewport to be resized without additional logic.\n      // Element a's size is the same as offset. b's size is total size - a size.\n      // Both sizes are calculated from the initial parent percentage, then the gutter size is subtracted.\n      , adjust = function (offset) {\n            setElementSize(this.a, (offset / this.size * this.percentage), this.aGutterSize)\n            setElementSize(this.b, (this.percentage - (offset / this.size * this.percentage)), this.bGutterSize)\n        }\n      , setElementSize = function (el, size, gutterSize) {\n            // Split.js allows setting sizes via numbers (ideally), or if you must,\n            // by string, like '300px'. This is less than ideal, because it breaks\n            // the fluid layout that `calc(% - px)` provides. You're on your own if you do that,\n            // make sure you calculate the gutter size by hand.\n            var style = options.elementStyle(dimension, size, gutterSize)\n              , props = Object.keys(style)\n\n            for (var i = 0; i < props.length; i++) {\n                el.style[props[i]] = style[props[i]]\n            }\n        }\n      , setGutterSize = function (gutter, gutterSize) {\n            var style = options.gutterStyle(dimension, gutterSize)\n              , props = Object.keys(style)\n\n            for (var i = 0; i < props.length; i++) {\n                gutter.style[props[i]] = style[props[i]]\n            }\n        }\n\n      // No-op function to prevent default. Used to prevent selection.\n      , noop = function () { return false }\n\n      // All DOM elements in the split should have a common parent. We can grab\n      // the first elements parent and hope users read the docs because the\n      // behavior will be whacky otherwise.\n      , parent = elementOrSelector(ids[0]).parentNode\n\n    // Set default options.sizes to equal percentages of the parent element.\n    if (!options.sizes) {\n        var percent = 100 / ids.length\n\n        options.sizes = []\n\n        for (i = 0; i < ids.length; i++) {\n            options.sizes.push(percent)\n        }\n    }\n\n    // Standardize minSize to an array if it isn't already. This allows minSize\n    // to be passed as a number.\n    if (!Array.isArray(options.minSize)) {\n        var minSizes = []\n\n        for (i = 0; i < ids.length; i++) {\n            minSizes.push(options.minSize)\n        }\n\n        options.minSize = minSizes\n    }\n\n    // 5. Loop through the elements while pairing them off. Every pair gets a\n    // `pair` object, a gutter, and isFirst/isLast properties.\n    //\n    // Basic logic:\n    //\n    // - Starting with the second element `i > 0`, create `pair` objects with\n    //   `a = ids[i - 1]` and `b = ids[i]`\n    // - Set gutter sizes based on the _pair_ being first/last. The first and last\n    //   pair have gutterSize / 2, since they only have one half gutter, and not two.\n    // - Create gutter elements and add event listeners.\n    // - Set the size of the elements, minus the gutter sizes.\n    //\n    // -----------------------------------------------------------------------\n    // |     i=0     |         i=1         |        i=2       |      i=3     |\n    // |             |       isFirst       |                  |     isLast   |\n    // |           pair 0                pair 1             pair 2           |\n    // |             |                     |                  |              |\n    // -----------------------------------------------------------------------\n    for (i = 0; i < ids.length; i++) {\n        var el = elementOrSelector(ids[i])\n          , isFirstPair = (i == 1)\n          , isLastPair = (i == ids.length - 1)\n          , size = options.sizes[i]\n          , gutterSize = options.gutterSize\n          , pair\n          , parentFlexDirection = window.getComputedStyle(parent).flexDirection\n          , temp\n\n        if (i > 0) {\n            // Create the pair object with it's metadata.\n            pair = {\n                a: elementOrSelector(ids[i - 1]),\n                b: el,\n                aMin: options.minSize[i - 1],\n                bMin: options.minSize[i],\n                dragging: false,\n                parent: parent,\n                isFirst: isFirstPair,\n                isLast: isLastPair,\n                direction: options.direction\n            }\n\n            // For first and last pairs, first and last gutter width is half.\n            pair.aGutterSize = options.gutterSize\n            pair.bGutterSize = options.gutterSize\n\n            if (isFirstPair) {\n                pair.aGutterSize = options.gutterSize / 2\n            }\n\n            if (isLastPair) {\n                pair.bGutterSize = options.gutterSize / 2\n            }\n\n            // if the parent has a reverse flex-direction, switch the pair elements.\n            if (parentFlexDirection === 'row-reverse' || parentFlexDirection === 'column-reverse') {\n                temp = pair.a;\n                pair.a = pair.b;\n                pair.b = temp;\n            }\n        }\n\n        // Determine the size of the current element. IE8 is supported by\n        // staticly assigning sizes without draggable gutters. Assigns a string\n        // to `size`.\n        // \n        // IE9 and above\n        if (!isIE8) {\n            // Create gutter elements for each pair.\n            if (i > 0) {\n                var gutter = document.createElement('div')\n\n                gutter.className = gutterClass\n\n                setGutterSize(gutter, gutterSize)\n\n                gutter[addEventListener]('mousedown', startDragging.bind(pair))\n                gutter[addEventListener]('touchstart', startDragging.bind(pair))\n\n                parent.insertBefore(gutter, el)\n\n                pair.gutter = gutter\n            }\n\n            // Half-size gutters for first and last elements.\n            if (i === 0 || i == ids.length - 1) {\n                gutterSize = options.gutterSize / 2\n            }\n        }\n\n        // Set the element size to our determined size.\n        setElementSize(el, size, gutterSize)\n\n        if (i > 0) {\n            var aSize = pair.a[getBoundingClientRect]()[dimension]\n              , bSize = pair.b[getBoundingClientRect]()[dimension]\n\n            if (aSize < pair.aMin) {\n                pair.aMin = aSize\n            }\n\n            if (bSize < pair.bMin) {\n                pair.bMin = bSize\n            }\n        }\n\n        // After the first iteration, and we have a pair object, append it to the\n        // list of pairs.\n        if (i > 0) {\n            pairs.push(pair)\n        }\n    }\n\n    return {\n        setSizes: function (sizes) {\n            for (var i = 0; i < sizes.length; i++) {\n                if (i > 0) {\n                    var pair = pairs[i - 1]\n\n                    setElementSize(pair.a, sizes[i - 1], pair.aGutterSize)\n                    setElementSize(pair.b, sizes[i], pair.bGutterSize)\n                }\n            }\n        },\n        getSizes: function () {\n            var sizes = []\n\n            for (var i = 0; i < pairs.length; i++) {\n                var pair = pairs[i]\n                  , computedStyle = global.getComputedStyle(pair.parent)\n                  , parentSize = pair.parent[clientDimension] - parseFloat(computedStyle[paddingA]) - parseFloat(computedStyle[paddingB])\n\n                sizes.push((pair.a[getBoundingClientRect]()[dimension] + pair.aGutterSize) / parentSize * 100)\n\n                if (i === pairs.length - 1) {\n                    sizes.push((pair.b[getBoundingClientRect]()[dimension] + pair.bGutterSize) / parentSize * 100)\n                }\n            }\n\n            return sizes\n        },\n        collapse: function (i) {\n            var pair\n\n            if (i === pairs.length) {\n                pair = pairs[i - 1]\n\n                calculateSizes.call(pair)\n                adjust.call(pair, pair.size - pair.bGutterSize)\n            } else {\n                pair = pairs[i]\n\n                calculateSizes.call(pair)\n                adjust.call(pair, pair.aGutterSize)\n            }\n        },\n        destroy: function () {\n            for (var i = 0; i < pairs.length; i++) {\n                pairs[i].parent.removeChild(pairs[i].gutter)\n                pairs[i].a.style[dimension] = ''\n                pairs[i].b.style[dimension] = ''\n            }\n        }\n    }\n}\n\n// Play nicely with module systems, and the browser too if you include it raw.\nif (typeof exports !== 'undefined') {\n    if (typeof module !== 'undefined' && module.exports) {\n        exports = module.exports = Split\n    }\n    exports.Split = Split\n} else {\n    global.Split = Split\n}\n\n// Call our wrapper function with the current global. In this case, `window`.\n}).call(window);\n","/home/travis/build/npmtest/node-npmtest-split.js/node_modules/split.js/Gruntfile.js":"module.exports = function(grunt) {\n  grunt.initConfig({\n    pkg: grunt.file.readJSON('package.json'),\n    jasmine: {\n        test: {\n            src: 'split.js',\n            options: {\n                specs: ['test/split.spec.js']\n            }\n        }\n    },\n    uglify: {\n      options: {\n        banner: '/*! Split.js - v<%= pkg.version %> */\\n'\n      },\n      output: {\n        files: {\n          'split.min.js': ['split.js']\n        }\n      }\n    }\n  });\n\n  grunt.loadNpmTasks('grunt-contrib-jasmine');\n  grunt.loadNpmTasks('grunt-contrib-uglify');\n};\n"}